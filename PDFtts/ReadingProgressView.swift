//
//  ReadingProgressView.swift
//  PDFtts
//
//  Created by Matt on 16/7/2025.
//

import SwiftUI

struct ReadingProgressView: View {
    @ObservedObject var ttsService: EnhancedTTSService
    let currentPage: Int
    let languages = ["zh": "‰∏≠Êñá", "en": "English"]
    
    var body: some View {
        VStack(spacing: 8) {
            
            // ËØ≠Ë®ÄÈÄâÊã©ÊèêÁ§∫ - ÂΩìÈúÄË¶ÅÁ°ÆËÆ§ËØ≠Ë®ÄÊó∂ÊòæÁ§∫ÔºåÊàñËÄÖËØ≠Ë®ÄÊú™Á°ÆËÆ§Êó∂ÂßãÁªàÊòæÁ§∫
            if ttsService.showLanguagePrompt || !ttsService.isLanguageConfirmed {
                VStack(spacing: 12) {
                    HStack {
                        Image(systemName: "exclamationmark.triangle.fill")
                            .foregroundColor(.orange)
                        Text("ËØ∑ÂÖàÈÄâÊã©ÊúóËØªËØ≠Ë®Ä")
                            .font(.headline)
                            .foregroundColor(.primary)
                    }
                    
                    Text(ttsService.showLanguagePrompt ? "ÈÄâÊã©ËØ≠Ë®ÄÂêéÂ∞ÜËá™Âä®ÂºÄÂßãÊí≠Êîæ" : "ËØ∑ÈÄâÊã©ÊúóËØªËØ≠Ë®Ä")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    HStack(spacing: 16) {
                        Button(action: {
                            ttsService.selectedLanguage = "zh"
                            if ttsService.showLanguagePrompt {
                                Task {
                                    await ttsService.confirmLanguageAndStartReading()
                                }
                            } else {
                                // Âè™ÊòØÈÄâÊã©ËØ≠Ë®ÄÔºå‰∏çËá™Âä®Êí≠Êîæ
                                print("üîÑ ËØ≠Ë®ÄÂ∑≤ÈÄâÊã©‰∏∫‰∏≠Êñá")
                            }
                        }) {
                            HStack {
                                Text("üá®üá≥")
                                Text("‰∏≠Êñá")
                            }
                            .padding(.horizontal, 20)
                            .padding(.vertical, 10)
                            .background(ttsService.selectedLanguage == "zh" ? Color.blue : Color.gray.opacity(0.2))
                            .foregroundColor(ttsService.selectedLanguage == "zh" ? .white : .primary)
                            .cornerRadius(8)
                        }
                        
                        Button(action: {
                            ttsService.selectedLanguage = "en"
                            if ttsService.showLanguagePrompt {
                                Task {
                                    await ttsService.confirmLanguageAndStartReading()
                                }
                            } else {
                                // Âè™ÊòØÈÄâÊã©ËØ≠Ë®ÄÔºå‰∏çËá™Âä®Êí≠Êîæ
                                print("üîÑ ËØ≠Ë®ÄÂ∑≤ÈÄâÊã©‰∏∫Ëã±Êñá")
                            }
                        }) {
                            HStack {
                                Text("üá∫üá∏")
                                Text("English")
                            }
                            .padding(.horizontal, 20)
                            .padding(.vertical, 10)
                            .background(ttsService.selectedLanguage == "en" ? Color.blue : Color.gray.opacity(0.2))
                            .foregroundColor(ttsService.selectedLanguage == "en" ? .white : .primary)
                            .cornerRadius(8)
                        }
                    }
                }
                .padding()
                .background(Color.orange.opacity(0.1))
                .cornerRadius(12)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.orange.opacity(0.3), lineWidth: 1)
                )
                .padding(.horizontal, 16)
            }
            
            // ËØ≠Ë®ÄÈÄâÊã©Âô® - ÂßãÁªàÊòæÁ§∫
            HStack {
                Picker("Language", selection: $ttsService.selectedLanguage) {
                    Text("‰∏≠Êñá").tag("zh")
                    Text("English").tag("en")
                }
                .pickerStyle(SegmentedPickerStyle())
                .frame(maxWidth: 200)
                .onChange(of: ttsService.selectedLanguage) { newLanguage in
                    print("üîÑ UIÊ£ÄÊµãÂà∞ËØ≠Ë®ÄÂàáÊç¢: \(newLanguage)")
                }
                
                Spacer()
                
                // Êí≠ÊîæÊéßÂà∂ÊåâÈíÆ
                HStack(spacing: 16) {
                    // ‰∏ªÊí≠Êîæ/ÊöÇÂÅúÊåâÈíÆ
                    Button(action: {
                        if ttsService.isPlaying {
                            if ttsService.isPaused {
                                ttsService.resumeReading()
                            } else {
                                ttsService.pauseReading()
                            }
                        } else {
                            startReadingCurrentPage()
                        }
                    }) {
                        Image(systemName: getPlayButtonIcon())
                            .font(.title2)
                            .padding(12)
                            .background(getPlayButtonColor())
                            .foregroundColor(.white)
                            .cornerRadius(20)
                    }
                    
                    // ÂÅúÊ≠¢ÊåâÈíÆ
                    if ttsService.isPlaying || ttsService.isPaused {
                        Button(action: {
                            ttsService.stopReading()
                        }) {
                            Image(systemName: "stop.fill")
                                .font(.title2)
                                .padding(12)
                                .background(Color.red)
                                .foregroundColor(.white)
                                .cornerRadius(20)
                        }
                    }
                    
                    // Áä∂ÊÄÅÂõæÊ†á
                    if ttsService.isGeneratingTTS {
                        // TTSÁîüÊàê‰∏≠ - Âä®ÊÄÅÊ≤ôÊºèÂõæÊ†á
                        Image(systemName: "hourglass")
                            .font(.title2)
                            .foregroundColor(.white)
                            .rotationEffect(.degrees(ttsService.isGeneratingTTS ? 180 : 0))
                            .animation(.easeInOut(duration: 1.0).repeatForever(autoreverses: true), value: ttsService.isGeneratingTTS)
                            .padding(12)
                            .background(Color.orange)
                            .cornerRadius(20)
                    } else if ttsService.isPlaying && !ttsService.isPaused {
                        // Êí≠Êîæ‰∏≠ - Âä®ÊÄÅÈü≥Ê≥¢ÂõæÊ†á
                        Image(systemName: "waveform")
                            .font(.title2)
                            .foregroundColor(.white)
                            .scaleEffect(ttsService.isPlaying ? 1.2 : 1.0)
                            .animation(.easeInOut(duration: 0.6).repeatForever(autoreverses: true), value: ttsService.isPlaying)
                            .padding(12)
                            .background(Color.blue)
                            .cornerRadius(20)
                    } else if ttsService.isPaused {
                        // ÊöÇÂÅú‰∏≠ - ÈùôÊÄÅÊöÇÂÅúÂõæÊ†á
                        Image(systemName: "pause.circle")
                            .font(.title2)
                            .foregroundColor(.white)
                            .padding(12)
                            .background(Color.orange)
                            .cornerRadius(20)
                    }
                }
                .padding(.vertical, 8)
                
                
                // ÂõûÂà∞ÊúóËØªÈ°µÊåâÈíÆ - Âè™Âú®ÊúóËØª‰∏î‰∏çÂú®ÊúóËØªÈ°µÊó∂ÊòæÁ§∫
                if ttsService.isPlaying && ttsService.currentReadingPage > 0 && ttsService.currentReadingPage != currentPage {
                    HStack {
                        Spacer()
                        Button(action: {
                            ttsService.goToReadingPage()
                        }) {
                            HStack(spacing: 8) {
                                Image(systemName: "book.circle.fill")
                                    .font(.caption2)
                                Text("ÂõûÂà∞Á¨¨\(ttsService.currentReadingPage)È°µ")
                                    .font(.caption2)
                                    .fontWeight(.medium)
                                    .lineLimit(1)
                            }
                            .padding(.horizontal, 16)
                            .padding(.vertical, 8)
                            .background(Color.green)
                            .foregroundColor(.white)
                            .cornerRadius(16)
                        }
                        Spacer()
                    }
                    .padding(.top, 4)
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
            .background(Color(UIColor.systemBackground))
            .cornerRadius(8)
            .shadow(radius: 1)
            
            
            // ÂΩìÂâçÊúóËØªÊñáÊú¨
            if !ttsService.currentReadingText.isEmpty {
                ScrollViewReader { proxy in
                    ScrollView {
                        Text(ttsService.currentReadingText)
                            .font(.body)
                            .foregroundColor(.primary)
                            .padding(.horizontal, 16)
                            .padding(.vertical, 16)
                            .background(Color.yellow.opacity(0.2))
                            .cornerRadius(12)
                            .overlay(
                                RoundedRectangle(cornerRadius: 12)
                                    .stroke(Color.yellow.opacity(0.5), lineWidth: 1)
                            )
                            .id("textContent")
                    }
                    .frame(maxHeight: 400)
                    .padding(.horizontal, 16)
                    .padding(.vertical, 8)
                    .background(Color(UIColor.systemBackground))
                    .cornerRadius(8)
                    .shadow(radius: 2)
                    .onChange(of: ttsService.currentReadingText) { _ in
                        // ÂΩìÊñáÊú¨ÂèòÂåñÊó∂Ëá™Âä®ÊªöÂä®Âà∞È°∂ÈÉ®
                        withAnimation(.easeInOut(duration: 0.3)) {
                            proxy.scrollTo("textContent", anchor: .top)
                        }
                    }
                }
            }
        }
        .animation(.easeInOut(duration: 0.3), value: ttsService.isPlaying)
        .animation(.easeInOut(duration: 0.3), value: ttsService.currentReadingText)
    }
    
    // Êí≠ÊîæÊéßÂà∂ËæÖÂä©ÂáΩÊï∞
    private func startReadingCurrentPage() {
        // ËøôÈáåÈúÄË¶ÅË∞ÉÁî®ContentViewÁöÑstartReadingÈÄªËæë
        // ‰∏¥Êó∂Ëß£ÂÜ≥ÊñπÊ°àÔºöÈÄöËøáTTSÊúçÂä°Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢ÊñáÊú¨
        if let getCurrentPage = ttsService.getCurrentPage,
           let getPageText = ttsService.getPageText {
            let currentPageNum = getCurrentPage()
            if let pageText = getPageText(currentPageNum), !pageText.isEmpty {
                print("üîä ÂºÄÂßãÊí≠ÊîæÁ¨¨ \(currentPageNum) È°µ")
                Task {
                    await ttsService.startReading(text: pageText)
                }
            } else {
                print("‚ùå Êó†Ê≥ïËé∑ÂèñÂΩìÂâçÈ°µÈù¢ÊñáÊú¨")
            }
        }
    }
    
    private func getPlayButtonIcon() -> String {
        if ttsService.isPlaying && ttsService.isPaused {
            return "play.fill"
        } else if ttsService.isPlaying {
            return "pause.fill"
        } else {
            return "play.fill"
        }
    }
    
    
    private func getPlayButtonColor() -> Color {
        if ttsService.isPlaying && !ttsService.isPaused {
            return .orange
        } else {
            return .blue
        }
    }
}

#Preview {
    VStack {
        ReadingProgressView(ttsService: EnhancedTTSService(), currentPage: 1)
            .padding()
        
        Spacer()
    }
}